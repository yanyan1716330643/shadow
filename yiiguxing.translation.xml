<application>
  <component name="AppStorage">
    <histories>
      <item value="Annotations are to be recorded in the class file by the compiler and * retained by the VM at run time, so they may be read reflectively." />
      <item value="Annotations are to be recorded in the class file by the compiler * but need not be retained by the VM at run time. This is the default * behavior." />
      <item value="compiler" />
      <item value="discarded" />
      <item value="Annotations are to be discarded by the compiler" />
      <item value="Annotation retention policy. The constants of this enumerated type * describe the various policies for retaining annotations. They are used * in conjunction with the {@link Retention} meta-annotation type to specify * how long annotations are to be retained." />
      <item value="Annotation" />
      <item value="retention" />
      <item value="policy" />
      <item value="Retention Policy" />
      <item value="condition" />
      <item value="* Returns a view of the portion of this list between the specified * &lt;tt&gt;fromIndex&lt;/tt&gt;, inclusive, and &lt;tt&gt;toIndex&lt;/tt&gt;, exclusive. (If * &lt;tt&gt;fromIndex&lt;/tt&gt; and &lt;tt&gt;toIndex&lt;/tt&gt; are equal, the returned list is * empty.) The returned list is backed by this list, so non-structural * changes in the returned list are reflected in this list, and vice-versa. * The returned list supports all of the optional list operations supported * by this list.&lt;p&gt; * * This method eliminates the need for explicit range operations (of * the sort that commonly exist for arrays). Any operation that expects * a list can be used as a range operation by passing a subList view * instead of a whole list. For example, the following idiom * removes a range of elements from a list: * &lt;pre&gt;{@code * list.subList(from, to).clear(); * }&lt;/pre&gt; * Similar idioms may be constructed for &lt;tt&gt;indexOf&lt;/tt&gt; and * &lt;tt&gt;lastIndexOf&lt;/tt&gt;, and all of the algorithms in the * &lt;tt&gt;Collections&lt;/tt&gt; class can be applied to a subList.&lt;p&gt; * * The semantics of the list returned by this method become undefined if * the backing list (i.e., this list) is &lt;i&gt;structurally modified&lt;/i" />
      <item value="snapshot Version" />
      <item value="snapshotV" />
      <item value="Invalid" />
      <item value="无效操作" />
      <item value="source" />
      <item value="源" />
      <item value="simpleness" />
      <item value="简单" />
      <item value="简洁" />
      <item value="cross" />
      <item value="snapshot version cross num limit" />
      <item value="跨越" />
      <item value="Step" />
      <item value="compression" />
      <item value="gt" />
      <item value="latest" />
      <item value="最新" />
      <item value="Quartz Service" />
      <item value="前缀" />
      <item value="Quartz" />
      <item value="Snapshot" />
      <item value="压缩" />
      <item value="小时" />
      <item value="奇偶" />
      <item value="偶" />
      <item value="单" />
      <item value="单数" />
      <item value="modify Time" />
      <item value="No Class Def Found Error" />
      <item value="Uncategorized SQL Exception" />
      <item value="EOF Parser Exception" />
      <item value="injection violation" />
      <item value="record" />
      <item value="记录" />
      <item value="comparison Face 1 vn" />
      <item value="Method threw 'org.springframework.jdbc.UncategorizedSQLException' exception." />
      <item value="限制" />
      <item value="decode" />
    </histories>
  </component>
</application>